{
  "version": 3,
  "sources": ["../../preact/src/constants.js", "../../preact/src/util.js", "../../preact/src/options.js", "../../preact/src/create-element.js", "../../preact/src/component.js", "../../preact/src/create-context.js", "../../preact/src/diff/children.js", "../../preact/src/diff/props.js", "../../preact/src/diff/index.js", "../../preact/src/render.js", "../../preact/src/clone-element.js", "../../preact/src/diff/catch-error.js", "../../preact/hooks/src/index.js"],
  "sourcesContent": ["export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { EMPTY_ARR } from \"./constants\";\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function(update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function(callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || setTimeout)(process);\n\t}\n}\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet queue;\n\twhile ((process._rerenderCount = rerenderQueue.length)) {\n\t\tqueue = rerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\n\t\trerenderQueue = [];\n\t\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t\t// process() calls from getting scheduled while `queue` is still being consumed.\n\t\tqueue.some(c => {\n\t\t\tif (c._dirty) renderComponent(c);\n\t\t});\n\t}\n}\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function(_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(enqueueRender);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType = context);\n}\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (childVNode == null || typeof childVNode == 'boolean') {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (Array.isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tnull,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldParentVNode, i + 1);\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tvnode,\n\t\t\t\t\tvnode,\n\t\t\t\t\tc,\n\t\t\t\t\tvnode._dom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (Array.isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 2\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// ARIA-attributes have a different notion of boolean values.\n\t\t// The value `false` is different from the attribute not\n\t\t// existing on the DOM, so we can't remove it. For non-boolean\n\t\t// ARIA-attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost us too many bytes. On top of\n\t\t// that other VDOM frameworks also always stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (\n\t\t\tvalue != null &&\n\t\t\t(value !== false || (name[0] === 'a' && name[1] === 'r'))\n\t\t) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\tthis._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\tthis._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n", "import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\tc.props = newProps;\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) c._dirty = false;\n\t\t\t\t\tc._vnode = newVNode;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._vnode = newVNode;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tArray.isArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) applyRef(r, null, parentVNode);\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(r[i], parentVNode, typeof vnode.type != 'function');\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) removeNode(vnode._dom);\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = (\n\t\t(!isHydrating && replaceNode) ||\n\t\tparentDom\n\t)._children = createElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tconst prevScu = currentComponent.shouldComponentUpdate;\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\tcurrentComponent.shouldComponentUpdate = function(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = err => {\n\t\t\tif (state._value) state._value(err);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n"],
  "mappings": "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",
  "names": ["slice", "options", "vnodeId", "isValidElement", "rerenderQueue", "prevDebounce", "i", "EMPTY_OBJ", "EMPTY_ARR", "IS_NON_DIMENSIONAL", "assign", "obj", "props", "removeNode", "node", "parentNode", "removeChild", "createVNode", "type", "props", "key", "ref", "original", "vnode", "undefined", "constructor", "vnodeId", "options", "Fragment", "props", "children", "Component", "context", "getDomSibling", "vnode", "childIndex", "indexOf", "sibling", "length", "type", "updateParentDomPointers", "i", "child", "base", "enqueueRender", "c", "rerenderQueue", "push", "process", "prevDebounce", "options", "debounceRendering", "setTimeout", "queue", "sort", "a", "b", "some", "component", "commitQueue", "oldVNode", "oldDom", "parentDom", "assign", "diff", "ownerSVGElement", "commitRoot", "diffChildren", "renderResult", "newParentVNode", "oldParentVNode", "globalContext", "isSvg", "excessDomChildren", "isHydrating", "j", "childVNode", "newDom", "firstChildDom", "refs", "oldChildren", "EMPTY_ARR", "oldChildrenLength", "createVNode", "Array", "isArray", "key", "undefined", "EMPTY_OBJ", "ref", "reorderChildren", "placeChild", "parentNode", "unmount", "applyRef", "tmp", "placeChild", "parentDom", "childVNode", "oldVNode", "oldChildren", "newDom", "oldDom", "nextDom", "sibDom", "j", "parentNode", "outer", "appendChild", "nextSibling", "length", "insertBefore", "diffProps", "dom", "newProps", "oldProps", "isSvg", "hydrate", "i", "setProperty", "setStyle", "style", "key", "value", "IS_NON_DIMENSIONAL", "test", "name", "oldValue", "useCapture", "o", "cssText", "replace", "toLowerCase", "slice", "_listeners", "addEventListener", "eventProxyCapture", "eventProxy", "removeEventListener", "e", "setAttribute", "removeAttribute", "type", "options", "event", "diff", "newVNode", "globalContext", "excessDomChildren", "commitQueue", "isHydrating", "tmp", "c", "isNew", "oldState", "snapshot", "clearProcessingException", "provider", "componentContext", "renderHook", "count", "renderResult", "newType", "constructor", "props", "contextType", "prototype", "render", "Component", "doRender", "sub", "state", "context", "getDerivedStateFromProps", "assign", "componentWillMount", "componentDidMount", "push", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "vnode", "componentWillUpdate", "componentDidUpdate", "getChildContext", "getSnapshotBeforeUpdate", "Fragment", "children", "diffChildren", "Array", "isArray", "base", "diffElementNodes", "diffed", "indexOf", "commitRoot", "root", "some", "cb", "call", "child", "oldHtml", "newHtml", "nodeType", "localName", "document", "createTextNode", "createElementNS", "createElement", "is", "data", "childNodes", "EMPTY_OBJ", "dangerouslySetInnerHTML", "attributes", "innerHTML", "getDomSibling", "removeNode", "checked", "applyRef", "ref", "current", "unmount", "parentVNode", "skipRemove", "r", "componentWillUnmount", "undefined", "this", "slice", "EMPTY_ARR", "options", "error", "vnode", "oldVNode", "errorInfo", "component", "ctor", "handled", "constructor", "getDerivedStateFromError", "setState", "componentDidCatch", "e", "vnodeId", "isValidElement", "Component", "prototype", "update", "callback", "s", "this", "state", "assign", "props", "push", "enqueueRender", "forceUpdate", "render", "Fragment", "rerenderQueue", "process", "i", "currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "EMPTY", "oldBeforeDiff", "options", "oldBeforeRender", "oldAfterDiff", "diffed", "oldCommit", "oldBeforeUnmount", "unmount", "getHookState", "index", "type", "hooks", "length", "push", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "_reducer", "action", "currentValue", "nextValue", "setState", "_hasScuFromHooks", "prevScu", "shouldComponentUpdate", "p", "s", "c", "stateHooks", "filter", "x", "every", "call", "this", "shouldUpdate", "forEach", "hookItem", "useEffect", "callback", "args", "state", "argsChanged", "_pendingArgs", "useLayoutEffect", "useRef", "initialValue", "useMemo", "current", "useImperativeHandle", "ref", "createHandle", "concat", "factory", "useCallback", "useContext", "context", "provider", "sub", "props", "value", "useDebugValue", "formatter", "useErrorBoundary", "cb", "errState", "componentDidCatch", "err", "undefined", "flushAfterPaintEffects", "component", "shift", "invokeCleanup", "invokeEffect", "e", "vnode", "requestAnimationFrame", "raf", "done", "clearTimeout", "timeout", "HAS_RAF", "cancelAnimationFrame", "setTimeout", "commitQueue", "some", "hasErrored", "hook", "comp", "cleanup", "oldArgs", "newArgs", "arg", "f"]
}
