import { version as ReactVersion } from "react-dom";
function getRenderer() {
  return {
    name: "@astrojs/react",
    clientEntrypoint: ReactVersion.startsWith("18.") ? "@astrojs/react/client.js" : "@astrojs/react/client-v17.js",
    serverEntrypoint: ReactVersion.startsWith("18.") ? "@astrojs/react/server.js" : "@astrojs/react/server-v17.js",
    jsxImportSource: "react",
    jsxTransformOptions: async () => {
      var _a;
      const babelPluginTransformReactJsxModule = await import("@babel/plugin-transform-react-jsx");
      const jsx = ((_a = babelPluginTransformReactJsxModule == null ? void 0 : babelPluginTransformReactJsxModule.default) == null ? void 0 : _a.default) ?? (babelPluginTransformReactJsxModule == null ? void 0 : babelPluginTransformReactJsxModule.default);
      return {
        plugins: [
          jsx(
            {},
            {
              runtime: "automatic",
              importSource: ReactVersion.startsWith("18.") ? "react" : "@astrojs/react"
            }
          )
        ]
      };
    }
  };
}
function getViteConfiguration() {
  return {
    optimizeDeps: {
      include: [
        ReactVersion.startsWith("18.") ? "@astrojs/react/client.js" : "@astrojs/react/client-v17.js",
        "react",
        "react/jsx-runtime",
        "react/jsx-dev-runtime",
        "react-dom"
      ],
      exclude: [
        ReactVersion.startsWith("18.") ? "@astrojs/react/server.js" : "@astrojs/react/server-v17.js"
      ]
    },
    resolve: {
      dedupe: ["react", "react-dom"]
    },
    ssr: {
      external: ReactVersion.startsWith("18.") ? ["react-dom/server", "react-dom/client"] : ["react-dom/server.js", "react-dom/client.js"]
    }
  };
}
function src_default() {
  return {
    name: "@astrojs/react",
    hooks: {
      "astro:config:setup": ({ addRenderer, updateConfig }) => {
        addRenderer(getRenderer());
        updateConfig({ vite: getViteConfiguration() });
      }
    }
  };
}
export {
  src_default as default
};
